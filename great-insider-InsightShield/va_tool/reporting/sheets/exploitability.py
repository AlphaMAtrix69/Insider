"""Exploitability Scoring sheet generator."""

from va_tool.reporting.sheets.base import BaseSheetGenerator
from va_tool.processing.scoring import calculate_exploitability_score


class ExploitabilitySheetGenerator(BaseSheetGenerator):
    """Generator for the Exploitability Scoring sheet."""
    
    def __init__(self):
        """Initialize the generator."""
        super().__init__(title="1.1 Exploitability Scoring")
    
    def generate(self, wb, df=None, **kwargs):
        """
        Generate the Exploitability Scoring sheet.
        
        Args:
            wb: Excel workbook
            df: DataFrame with vulnerability data
            **kwargs: Additional arguments
        
        Returns:
            The worksheet
        """
        self.logger.info("Generating Exploitability Scoring sheet")
        ws = super().generate(wb)
        
        # Add title
        self.add_title(
            ws, "Exploitability Scoring", 
            font_size=14, merge_range='A1:H1'
        )
        
        # Define columns to include
        columns = [
            "Plugin ID", "CVE", "Host", "Name", "Description", "Plugin Output", "Risk",
            "CVSS v3.0 Base Score", "CVSS Category", "EPSS Score", "EPSS Category",
            "VPR Score", "VPR Category", "KEV Listed"
        ]
        
        # Make sure all required columns exist in the DataFrame
        if df is not None and all(col in df.columns for col in columns):
            # Create a copy to avoid modifying the original
            exploitability_df = df[columns].copy()
            
            # Calculate exploitability score
            exploitability_df['Exploitability Score'] = exploitability_df.apply(calculate_exploitability_score, axis=1)
            
            # Filter for entries with valid ratings
            valid_ratings = ['Critical', 'High', 'Medium', 'Low']
            exploitability_df = exploitability_df[exploitability_df['Risk'].isin(valid_ratings)]
            
            # Sort by exploitability score in descending order
            exploitability_df = exploitability_df.sort_values('Exploitability Score', ascending=False)
            
            # Add headers
            headers = columns + ['Exploitability Score']
            self.write_headers(ws, headers, row=3)
            
            # Write data
            for row_idx, (_, row) in enumerate(exploitability_df.iterrows(), 4):
                for col_idx, col in enumerate(headers, 1):
                    ws.cell(row=row_idx, column=col_idx, value=row.get(col, ''))
        else:
            ws['A3'] = "Required vulnerability data not available."
        
        return ws