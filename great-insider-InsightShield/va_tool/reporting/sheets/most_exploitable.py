"""Most Exploitable Hosts sheet generator."""

from va_tool.reporting.sheets.base import BaseSheetGenerator
from va_tool.processing.scoring import calculate_exploitability_score
from openpyxl.chart import BarChart, Reference
from openpyxl.chart.label import DataLabelList
from openpyxl.utils import get_column_letter
from openpyxl.utils.cell import coordinate_from_string, column_index_from_string


class MostExploitableSheetGenerator(BaseSheetGenerator):
    """Generator for the Most Exploitable Hosts sheet."""
    
    def __init__(self):
        """Initialize the generator."""
        super().__init__(title="1.3 Most Exploitable")
    
    def generate(self, wb, df=None, **kwargs):
        """
        Generate the Most Exploitable Hosts sheet.
        
        Args:
            wb: Excel workbook
            df: DataFrame with vulnerability data
            **kwargs: Additional arguments
        
        Returns:
            The worksheet
        """
        self.logger.info("Generating Most Exploitable Hosts sheet")
        ws = super().generate(wb)
        
        # Add title
        self.add_title(
            ws, "Most Exploitable Hosts", 
            font_size=14, merge_range='A1:D1'
        )
        
        # Set column widths (customize for this sheet)
        for col in range(1, 10):
            col_letter = get_column_letter(col)
            ws.column_dimensions[col_letter].width = 18
        
        if df is not None and "Host" in df.columns:
            # Calculate host-based exploitability scores
            host_exploitability = self.calculate_host_exploitability(df)
            
            if host_exploitability:
                # Create headers
                headers = ["Host", "Cumulative Exploitability", "Critical Count", "High Count", 
                          "Medium Count", "Low Count", "Total Vulnerabilities"]
                
                self.write_headers(ws, headers, row=3)
                
                # Write data
                for row_idx, host_data in enumerate(host_exploitability, 4):
                    for col_idx, col in enumerate(headers, 1):
                        ws.cell(row=row_idx, column=col_idx, value=host_data.get(col, 0))
                
                # Create chart
                self.create_exploitability_chart(ws, host_exploitability, len(headers))
            else:
                ws['A3'] = "No host data available for exploitability analysis."
        else:
            ws['A3'] = "No vulnerability data available or 'Host' column missing."
        
        return ws
    
    def calculate_host_exploitability(self, df):
        """Calculate exploitability scores for each host."""
        host_exploitability_list = []
        
        # Process each host
        for host in df["Host"].unique():
            host_df = df[df["Host"] == host]
            
            # Calculate exploitability score for each vulnerability on this host
            host_df['Exploitability Score'] = host_df.apply(calculate_exploitability_score, axis=1)
            
            # Sum up all exploitability scores for this host
            total_score = host_df['Exploitability Score'].sum()
            
            # Count vulnerabilities by severity
            critical_count = len(host_df[host_df["Risk"] == "Critical"])
            high_count = len(host_df[host_df["Risk"] == "High"])
            medium_count = len(host_df[host_df["Risk"] == "Medium"])
            low_count = len(host_df[host_df["Risk"] == "Low"])
            
            host_exploitability_list.append({
                "Host": host,
                "Cumulative Exploitability": total_score,
                "Critical Count": critical_count,
                "High Count": high_count,
                "Medium Count": medium_count,
                "Low Count": low_count,
                "Total Vulnerabilities": len(host_df)
            })
        
        # Sort by cumulative exploitability
        host_exploitability_list.sort(key=lambda x: x["Cumulative Exploitability"], reverse=True)
        
        return host_exploitability_list
    
    def create_exploitability_chart(self, ws, host_exploitability_list, num_columns):
        """Create a bar chart for exploitability scores."""
        # Create bar chart
        chart = BarChart()
        chart.type = "col"
        chart.style = 10
        chart.title = "Top Hosts by Exploitability Score"
        chart.y_axis.title = "Exploitability Score"
        chart.x_axis.title = "Host"
        
        # Determine number of hosts to show (up to 10)
        top_n = min(10, len(host_exploitability_list))
        
        # Get data range
        data = Reference(
            ws, min_col=2, max_col=2, min_row=3, max_row=3 + top_n
        )
        
        # Get category range (host names)
        cats = Reference(
            ws, min_col=1, max_col=1, min_row=4, max_row=3 + top_n
        )
        
        # Add data to chart
        chart.add_data(data, titles_from_data=True)
        chart.set_categories(cats)
        
        # Set chart size
        chart.height = 15
        chart.width = 20
        
        # Add data labels
        chart.dataLabels = DataLabelList()
        chart.dataLabels.showVal = True
        
        # Add chart to worksheet
        ws.add_chart(chart, "I3")